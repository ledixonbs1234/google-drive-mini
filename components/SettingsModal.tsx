// components/SettingsModal.tsx
'use client';

import { useState } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { Fragment } from 'react';
import { FaTimes, FaCog, FaShieldAlt, FaDatabase, FaPalette, FaCode } from 'react-icons/fa';
import { useAppStore } from '../store/useAppStore';
import { twMerge } from 'tailwind-merge';

interface SettingsModalProps {
  isOpen: boolean;
  onClose: () => void;
}

type SettingsTab = 'general' | 'appearance' | 'storage' | 'privacy' | 'advanced';

const SettingsModal: React.FC<SettingsModalProps> = ({ isOpen, onClose }) => {
  const [activeTab, setActiveTab] = useState<SettingsTab>('general');
  const { theme, viewMode, setViewMode, toggleTheme, setTheme } = useAppStore();

  const [settings, setSettings] = useState({
    // General
    autoSave: true,
    defaultView: 'grid' as 'grid' | 'list',
    showHiddenFiles: false,
    confirmDelete: true,
    autoRefresh: true,
    language: 'vi',
    
    // Appearance
    compactMode: false,
    showThumbnails: true,
    animationsEnabled: true,
    
    // Storage
    maxUploadSize: 100, // MB
    compressionEnabled: true,
    autoCleanup: false,
    backupEnabled: true,
    
    // Privacy
    shareLinks: true,
    downloadTracking: false,
    analyticsEnabled: false,
    
    // Advanced
    debugMode: false,
    experimentalFeatures: false,
    cacheEnabled: true,
    preloadEnabled: true
  });

  const handleSettingChange = (key: string, value: any) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const tabs = [
    { id: 'general', label: 'Chung', icon: FaCog },
    { id: 'appearance', label: 'Giao di·ªán', icon: FaPalette },
    { id: 'storage', label: 'L∆∞u tr·ªØ', icon: FaDatabase },
    { id: 'privacy', label: 'Ri√™ng t∆∞', icon: FaShieldAlt },
    { id: 'advanced', label: 'N√¢ng cao', icon: FaCode }
  ] as const;

  const renderGeneralSettings = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-4">C√†i ƒë·∫∑t chung</h3>
        
        {/* Auto Save */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              T·ª± ƒë·ªông l∆∞u
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              T·ª± ƒë·ªông l∆∞u c√°c thay ƒë·ªïi m√† kh√¥ng c·∫ßn x√°c nh·∫≠n
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.autoSave}
            onChange={(e) => handleSettingChange('autoSave', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Default View */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Ch·∫ø ƒë·ªô xem m·∫∑c ƒë·ªãnh
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Ch·∫ø ƒë·ªô hi·ªÉn th·ªã file v√† th∆∞ m·ª•c
            </p>
          </div>
          <select
            value={settings.defaultView}
            onChange={(e) => handleSettingChange('defaultView', e.target.value)}
            className="px-3 py-2 border border-gray-300 dark:border-zinc-600 rounded-md bg-white dark:bg-zinc-700 text-sm"
          >
            <option value="grid">L∆∞·ªõi</option>
            <option value="list">Danh s√°ch</option>
          </select>
        </div>

        {/* Show Hidden Files */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Hi·ªÉn th·ªã file ·∫©n
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Hi·ªÉn th·ªã c√°c file v√† th∆∞ m·ª•c ·∫©n
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.showHiddenFiles}
            onChange={(e) => handleSettingChange('showHiddenFiles', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Confirm Delete */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              X√°c nh·∫≠n x√≥a
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.confirmDelete}
            onChange={(e) => handleSettingChange('confirmDelete', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Language */}
        <div className="flex items-center justify-between py-3">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Ng√¥n ng·ªØ
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Ng√¥n ng·ªØ hi·ªÉn th·ªã giao di·ªán
            </p>
          </div>
          <select
            value={settings.language}
            onChange={(e) => handleSettingChange('language', e.target.value)}
            className="px-3 py-2 border border-gray-300 dark:border-zinc-600 rounded-md bg-white dark:bg-zinc-700 text-sm"
          >
            <option value="vi">Ti·∫øng Vi·ªát</option>
            <option value="en">English</option>
            <option value="ja">Êó•Êú¨Ë™û</option>
            <option value="ko">ÌïúÍµ≠Ïñ¥</option>
          </select>
        </div>
      </div>
    </div>
  );

  const renderAppearanceSettings = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-4">Giao di·ªán</h3>
        
        {/* Theme */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Ch·∫ø ƒë·ªô m√†u
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Ch·ªçn ch·∫ø ƒë·ªô s√°ng ho·∫∑c t·ªëi - Hi·ªán t·∫°i: {theme === 'light' ? '‚òÄÔ∏è S√°ng' : 'üåô T·ªëi'}
            </p>
          </div>
          <select
            value={theme}
            onChange={(e) => setTheme(e.target.value as 'light' | 'dark')}
            className="px-3 py-2 border border-gray-300 dark:border-zinc-600 rounded-md bg-white dark:bg-zinc-700 text-sm"
          >
            <option value="light">‚òÄÔ∏è S√°ng</option>
            <option value="dark">üåô T·ªëi</option>
          </select>
        </div>

        {/* Compact Mode */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Ch·∫ø ƒë·ªô thu g·ªçn
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Hi·ªÉn th·ªã giao di·ªán thu g·ªçn ƒë·ªÉ ti·∫øt ki·ªám kh√¥ng gian
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.compactMode}
            onChange={(e) => handleSettingChange('compactMode', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Show Thumbnails */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Hi·ªÉn th·ªã thumbnail
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Hi·ªÉn th·ªã h√¨nh thu nh·ªè cho ·∫£nh v√† video
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.showThumbnails}
            onChange={(e) => handleSettingChange('showThumbnails', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Animations */}
        <div className="flex items-center justify-between py-3">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              B·∫≠t/t·∫Øt hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªông trong giao di·ªán
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.animationsEnabled}
            onChange={(e) => handleSettingChange('animationsEnabled', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>
      </div>
    </div>
  );

  const renderStorageSettings = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-4">L∆∞u tr·ªØ</h3>
        
        {/* Max Upload Size */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              K√≠ch th∆∞·ªõc upload t·ªëi ƒëa
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              K√≠ch th∆∞·ªõc t·ªëi ƒëa cho m·ªói file upload (MB)
            </p>
          </div>
          <input
            type="number"
            value={settings.maxUploadSize}
            onChange={(e) => handleSettingChange('maxUploadSize', parseInt(e.target.value))}
            className="px-3 py-2 border border-gray-300 dark:border-zinc-600 rounded-md bg-white dark:bg-zinc-700 text-sm w-20"
            min="1"
            max="1000"
          />
        </div>

        {/* Compression */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              N√©n file t·ª± ƒë·ªông
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              T·ª± ƒë·ªông n√©n file l·ªõn tr∆∞·ªõc khi upload
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.compressionEnabled}
            onChange={(e) => handleSettingChange('compressionEnabled', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Auto Cleanup */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              T·ª± ƒë·ªông d·ªçn d·∫πp
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              T·ª± ƒë·ªông x√≥a file t·∫°m v√† file r√°c
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.autoCleanup}
            onChange={(e) => handleSettingChange('autoCleanup', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Backup */}
        <div className="flex items-center justify-between py-3">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Sao l∆∞u t·ª± ƒë·ªông
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              T·ª± ƒë·ªông sao l∆∞u d·ªØ li·ªáu quan tr·ªçng
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.backupEnabled}
            onChange={(e) => handleSettingChange('backupEnabled', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>
      </div>
    </div>
  );

  const renderPrivacySettings = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-4">Ri√™ng t∆∞ & B·∫£o m·∫≠t</h3>
        
        {/* Share Links */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Cho ph√©p chia s·∫ª link
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Cho ph√©p t·∫°o v√† chia s·∫ª link c√¥ng khai
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.shareLinks}
            onChange={(e) => handleSettingChange('shareLinks', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Download Tracking */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Theo d√µi t·∫£i xu·ªëng
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Theo d√µi v√† th·ªëng k√™ ho·∫°t ƒë·ªông t·∫£i xu·ªëng
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.downloadTracking}
            onChange={(e) => handleSettingChange('downloadTracking', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Analytics */}
        <div className="flex items-center justify-between py-3">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Ph√¢n t√≠ch s·ª≠ d·ª•ng
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Chia s·∫ª d·ªØ li·ªáu s·ª≠ d·ª•ng ƒë·ªÉ c·∫£i thi·ªán s·∫£n ph·∫©m
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.analyticsEnabled}
            onChange={(e) => handleSettingChange('analyticsEnabled', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>
      </div>
    </div>
  );

  const renderAdvancedSettings = () => (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-4">N√¢ng cao</h3>
        
        {/* Debug Mode */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              Ch·∫ø ƒë·ªô debug
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Hi·ªÉn th·ªã th√¥ng tin debug trong console
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.debugMode}
            onChange={(e) => handleSettingChange('debugMode', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Experimental Features */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              T√≠nh nƒÉng th·ª≠ nghi·ªám
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              B·∫≠t c√°c t√≠nh nƒÉng ƒëang trong giai ƒëo·∫°n th·ª≠ nghi·ªám
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.experimentalFeatures}
            onChange={(e) => handleSettingChange('experimentalFeatures', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Cache */}
        <div className="flex items-center justify-between py-3 border-b border-gray-200 dark:border-zinc-700">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              B·ªô nh·ªõ ƒë·ªám
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              S·ª≠ d·ª•ng b·ªô nh·ªõ ƒë·ªám ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.cacheEnabled}
            onChange={(e) => handleSettingChange('cacheEnabled', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>

        {/* Preload */}
        <div className="flex items-center justify-between py-3">
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-gray-100">
              T·∫£i tr∆∞·ªõc
            </label>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              T·∫£i tr∆∞·ªõc n·ªôi dung ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám
            </p>
          </div>
          <input
            type="checkbox"
            checked={settings.preloadEnabled}
            onChange={(e) => handleSettingChange('preloadEnabled', e.target.checked)}
            className="toggle-checkbox"
          />
        </div>
      </div>
    </div>
  );

  const renderTabContent = () => {
    switch (activeTab) {
      case 'general':
        return renderGeneralSettings();
      case 'appearance':
        return renderAppearanceSettings();
      case 'storage':
        return renderStorageSettings();
      case 'privacy':
        return renderPrivacySettings();
      case 'advanced':
        return renderAdvancedSettings();
      default:
        return null;
    }
  };

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black bg-opacity-50" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4 text-center">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-4xl transform overflow-hidden rounded-2xl bg-white dark:bg-zinc-800 text-left align-middle shadow-xl transition-all">
                <div className="flex">
                  {/* Sidebar */}
                  <div className="w-64 bg-gray-50 dark:bg-zinc-900 p-4 border-r border-gray-200 dark:border-zinc-700">
                    <div className="flex items-center justify-between mb-6">
                      <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                        C√†i ƒë·∫∑t
                      </h2>
                      <button
                        onClick={onClose}
                        className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                      >
                        <FaTimes className="w-5 h-5" />
                      </button>
                    </div>
                    
                    <nav className="space-y-2">
                      {tabs.map((tab) => (
                        <button
                          key={tab.id}
                          onClick={() => setActiveTab(tab.id)}
                          className={twMerge(
                            'w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors',
                            activeTab === tab.id
                              ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
                              : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-zinc-800'
                          )}
                        >
                          <tab.icon className="w-4 h-4" />
                          <span>{tab.label}</span>
                        </button>
                      ))}
                    </nav>
                  </div>

                  {/* Content */}
                  <div className="flex-1 p-6">
                    {renderTabContent()}
                  </div>
                </div>

                {/* Footer */}
                <div className="border-t border-gray-200 dark:border-zinc-700 p-4 flex justify-end space-x-3">
                  <button
                    onClick={onClose}
                    className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100"
                  >
                    H·ªßy
                  </button>
                  <button
                    onClick={() => {
                      // Save settings
                      console.log('Save settings:', settings);
                      onClose();
                    }}
                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-md"
                  >
                    L∆∞u thay ƒë·ªïi
                  </button>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
};

export default SettingsModal;
