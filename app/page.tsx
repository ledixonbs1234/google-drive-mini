// app/page.tsx
'use client'; // C·∫ßn thi·∫øt v√¨ s·ª≠ d·ª•ng hooks (useState, useEffect) v√† Zustand

import { useState, useEffect, useCallback } from 'react';
import EnhancedFileUploader from '../components/EnhancedFileUploader';
import AdvancedSearch from '../components/AdvancedSearch';
import FileList from '../components/FileList';
import Breadcrumbs from '../components/Breadcrumbs';
import CreateFolderModal from '../components/CreateFolderModal';
import ImagePreviewModal from '../components/ImagePreviewModal';
import PreviewModal from '../components/PreviewModal';
import CodeEditorModal from '../components/CodeEditorModal'; 
import StorageIndicator from '../components/StorageIndicator'; // Ch·ªâ gi·ªØ StorageIndicator
import { useAppStore } from '../store/useAppStore'; // Import store Zustand
import { FaFolderPlus, FaSearch, FaThLarge, FaList, FaSun, FaMoon } from 'react-icons/fa'; // Th√™m icons
import SharedNotepad from '@/components/SharedNotepad';

export default function Home() {
  // State qu·∫£n l√Ω ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c hi·ªán t·∫°i
  // V√≠ d·ª•: "" (g·ªëc), "folderA/", "folderA/subFolderB/"
  const [currentPath, setCurrentPath] = useState('');
  const [refreshKey, setRefreshKey] = useState(0);
  // State cho vi·ªác t√¨m ki·∫øm
  const [searchTerm, setSearchTerm] = useState('');
  // State ƒë·ªÉ trigger refresh storage quota
  const [storageRefreshTrigger, setStorageRefreshTrigger] = useState(0);

  // L·∫•y c√°c state v√† actions t·ª´ store Zustand
  const {
    viewMode, setViewMode,
    theme, toggleTheme,
    openCreateFolderModal,
    openImagePreviewModal,
    openPreviewModal,
    isCreateFolderModalOpen,
    isImagePreviewModalOpen,
    isPreviewModalOpen,
    isEditorModalOpen, // <-- L·∫•y state c·ªßa editor modal
 } = useAppStore();


  // Callback ƒë·ªÉ refresh d·ªØ li·ªáu (truy·ªÅn xu·ªëng FileList n·∫øu c·∫ßn, ho·∫∑c FileList t·ª± fetch l·∫°i)
  // Trong tr∆∞·ªùng h·ª£p n√†y FileList t·ª± fetch l·∫°i khi path thay ƒë·ªïi, n√™n ch·ªâ c·∫ßn thay ƒë·ªïi path
  const refreshData = () => {
      // T·∫°o m·ªôt gi√° tr·ªã m·ªõi ƒë·ªÉ bu·ªôc useEffect trong FileList ch·∫°y l·∫°i n·∫øu c·∫ßn
      // Tuy nhi√™n, c√°ch t·ªët nh·∫•t l√† FileList t·ª± fetch khi path thay ƒë·ªïi
      console.log("Y√™u c·∫ßu refresh d·ªØ li·ªáu cho path:", currentPath);
      setRefreshKey(prevKey => prevKey + 1);
      // Trigger refresh storage quota
      setStorageRefreshTrigger(prev => prev + 1);
      // N·∫øu FileList kh√¥ng t·ª± ƒë·ªông c·∫≠p nh·∫≠t sau khi t·∫°o/x√≥a, b·∫°n c·∫ßn c∆° ch·∫ø kh√°c
      // V√≠ d·ª•: th√™m m·ªôt state `refreshKey` v√† thay ƒë·ªïi n√≥
  };


  // X·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng khi click Breadcrumb ho·∫∑c Folder
  const handleNavigate = useCallback((newPath: string) => {
      setCurrentPath(newPath);
      setSearchTerm(''); // Reset t√¨m ki·∫øm khi chuy·ªÉn th∆∞ m·ª•c
  }, []); // Kh√¥ng c√≥ dependency v√¨ ch·ªâ set state


  return (
    <main className="min-h-screen text-gray-900 dark:text-gray-100 p-4 sm:p-6">
      <div className="max-w-7xl mx-auto bg-white dark:bg-zinc-800 shadow-lg rounded-xl overflow-hidden">
        {/* Header c·ªßa ·ª©ng d·ª•ng */}
        <header className="p-4 border-b border-gray-200 dark:border-zinc-700 flex flex-col sm:flex-row justify-between items-center space-y-3 sm:space-y-0">
          <div className="flex items-center space-x-4">
            <h1 className="text-xl sm:text-2xl font-bold text-gray-800 dark:text-gray-100">
              ü™ü Drive Mini
            </h1>
            {/* Storage Indicator compact trong header */}
            <StorageIndicator 
              refreshTrigger={storageRefreshTrigger} 
              compact={true}
              showLabel={false}
            />
          </div>

          {/* Thanh c√¥ng c·ª•: Search, View, Theme, Create */}
          <div className="flex items-center space-x-2 sm:space-x-3">
            {/* Advanced Search */}
            <div className="flex-1 max-w-md">
              <AdvancedSearch
                onResultSelect={(result) => {
                  // Handle file selection for preview
                  if (!result.isFolder && result.url) {
                    // Determine file type and open appropriate preview
                    const fileType = result.type || 'unknown';
                    if (fileType === 'image') {
                      openImagePreviewModal(result.url);
                    } else {
                      openPreviewModal({
                        name: result.name,
                        url: result.url,
                        type: fileType as any
                      });
                    }
                  }
                }}
                onNavigate={(path) => {
                  // Handle navigation to folder
                  setCurrentPath(path);
                }}
              />
            </div>

             {/* View Toggle */}
             <button
                onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')}
                className="p-2 rounded-md text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-zinc-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-zinc-800"
                title={viewMode === 'grid' ? 'Chuy·ªÉn sang d·∫°ng danh s√°ch' : 'Chuy·ªÉn sang d·∫°ng l∆∞·ªõi'}
            >
                {viewMode === 'grid' ? <FaList className="w-4 h-4"/> : <FaThLarge className="w-4 h-4"/>}
            </button>

            {/* Theme Toggle */}
            <button
                onClick={toggleTheme}
                className="p-2 rounded-md text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-zinc-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-zinc-800"
                title={theme === 'light' ? 'Chuy·ªÉn sang n·ªÅn t·ªëi' : 'Chuy·ªÉn sang n·ªÅn s√°ng'}
            >
                {theme === 'light' ? <FaMoon className="w-4 h-4"/> : <FaSun className="w-4 h-4"/>}
            </button>

            {/* Create Folder Button */}
            <button
                onClick={openCreateFolderModal}
                className="flex items-center bg-blue-600 hover:bg-blue-700 text-white font-medium py-1.5 px-3 rounded-md text-sm transition-colors"
                title="T·∫°o th∆∞ m·ª•c m·ªõi"
            >
                <FaFolderPlus className="w-4 h-4 mr-1.5" />
                <span>T·∫°o m·ªõi</span>
            </button>
          </div>
        </header>

        {/* Khu v·ª±c n·ªôi dung ch√≠nh */}
        <div className="p-4 sm:p-6">
           {/* Breadcrumbs */}
           <Breadcrumbs currentPath={currentPath} onNavigate={handleNavigate} />

          {/* File Uploader */}
          <EnhancedFileUploader currentPath={currentPath} onUploadComplete={refreshData} />

          {/* File List */}
          <FileList
            key={currentPath} // Gi·ªØ l·∫°i ƒë·ªÉ remount khi navigate
            currentPath={currentPath}
            onNavigate={handleNavigate}
            // onUploadComplete kh√¥ng c·∫ßn thi·∫øt ·ªü ƒë√¢y n·ªØa v√¨ page x·ª≠ l√Ω refresh
            searchTerm={searchTerm}
            refreshKey={refreshKey} // --- Th√™m prop refreshKey ---
          />
           <SharedNotepad />
        </div>
      </div>

      {/* Modals (n·∫±m ngo√†i c·∫•u tr√∫c layout ch√≠nh ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng) */}
      {isCreateFolderModalOpen && (
          <CreateFolderModal currentPath={currentPath} onFolderCreated={refreshData} />
      )}
       {isImagePreviewModalOpen && <ImagePreviewModal />}
       {isPreviewModalOpen && <PreviewModal />}

       {/* Render Code Editor Modal n·∫øu isEditorModalOpen l√† true */}
       {isEditorModalOpen && <CodeEditorModal />}
    </main>
  );
}